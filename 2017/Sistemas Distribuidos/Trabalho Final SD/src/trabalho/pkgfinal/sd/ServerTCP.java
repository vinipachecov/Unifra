package trabalho.pkgfinal.sd;


import com.sun.xml.internal.ws.api.pipe.Engine;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import jdk.nashorn.internal.objects.Global;
import javax.script.ScriptEngineManager;
import javax.script.ScriptEngine;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author root
 */
public class ServerTCP extends javax.swing.JFrame {
    ServerSocket server;
    ArrayList<Socket> clientList;
    /**
     * Creates new form Servidor
     */
    public ServerTCP() {
        initComponents();
        clientList = new ArrayList<Socket>();
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverStartButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTCPTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        portaJTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serverStartButton.setText("Iniciar Servidor");
        serverStartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serverStartButtonMouseClicked(evt);
            }
        });

        logTCPTextArea.setEditable(false);
        logTCPTextArea.setColumns(20);
        logTCPTextArea.setRows(5);
        jScrollPane1.setViewportView(logTCPTextArea);

        jLabel1.setText("Porta");

        portaJTF.setText("1234");

        jLabel2.setText("ServerTCP");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portaJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(serverStartButton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(331, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverStartButton)
                    .addComponent(jLabel1)
                    .addComponent(portaJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void serverStartButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverStartButtonMouseClicked
        // TODO add your handling code here:
        try {
            server = new ServerSocket(Integer.parseInt(portaJTF.getText().toString()));
            //create equation handler
                        
            
            logTCPTextArea.append("Server TCP  Started with Success on port " + Integer.parseInt(portaJTF.getText().toString()) + '\n');            
            logTCPTextArea.append("Waiting messages..." + '\n');            
        } catch (Exception e) {
        }
        
        
        //Creation of a inline thread to wait clients (so it doesn't block the main thread (graphic interface*))
        new Thread(){
            public void run(){
                try {                                
                    
                    //wait connection of a clinet
                    while(true){
                        Socket client = server.accept();     
                        
                                                
                        
                        //Create a secondary thread to wait messages                 
                        new Thread(){
                            Socket myclient = client;
                            public void run(){
                                try {
                                    
                                    //No need for receiving matching as TCP already validates
                                    
                                    DataInputStream inStream = new DataInputStream(myclient.getInputStream());                                    
                                    while(true){                                    
                                        try {
                                            Integer data = inStream.readInt();
                                            logTCPTextArea.append("Received Message " + data + "\n");                                             
                                        } catch (Exception e) {
                                            logTCPTextArea.append("Error Receiving equation from client " +e.getMessage() );
                                        }                                                                             
                                    }                                    
                                } catch (Exception e) {
                                    //case where client leaved
                                    e.printStackTrace();
                                    logTCPTextArea.append("Client " + myclient.getInetAddress() + "has disconnected" );                                         
                                }
                                
                            }
                        }.start();
                    }            
            
                } catch (Exception e) {
                logTCPTextArea.append("Porta " + Integer.parseInt(portaJTF.getText().toString())  + " Ocupada ou Erro ao iniciar servidor" );
            }
                
            }
        }.start();
        
    }//GEN-LAST:event_serverStartButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerTCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerTCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerTCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerTCP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerTCP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTCPTextArea;
    private javax.swing.JTextField portaJTF;
    private javax.swing.JButton serverStartButton;
    // End of variables declaration//GEN-END:variables
}
