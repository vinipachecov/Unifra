/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabalho.pkgfinal.sd;

import com.sun.xml.internal.ws.wsdl.writer.document.Message;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.MulticastSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Scanner;
import org.jgroups.JChannel;
import org.jgroups.Receiver;

/**
 *
 * @author root
 */
public class Client extends javax.swing.JFrame {
    Socket socketTCP;
    Integer cont;
    Integer messageTCP;
    Integer messageUDP;
    Integer messageMulticast;
    Integer messageRMI;
    boolean keepsending;
    MulticastSocket multicastServer;
    boolean multicastReceive;
    boolean multicastSent;
    InetAddress group;
    Integer numberMessages;    
    IChat chat = null;
    Callback callback = null;
    JChannel channel;
    
     class Callback extends UnicastRemoteObject implements ICallback{

        //construtor padrão
        Callback() throws RemoteException{
            
        }
        
        @Override
        public void repassaMensagem(String mensagem) throws RemoteException {
            //toda mensagem recebida do servidor é adicionada
            //ao textArea do chat
            rmiTextArea.append("Message Received: " + mensagem + "\n");
            rmiTextArea.setCaretPosition(rmiTextArea.getDocument().getLength());
        }
        
    }
    
    
    DatagramSocket socketClientUDP = null;
    /**
     * Creates new form view1
     */
    public Client() {
        initComponents();    
        numMessages.setText("100");
        messageTCP = 0;
        messageMulticast = 0;
        messageRMI = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ipJtf = new javax.swing.JTextField();
        portaJTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        conectarButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tcpTextArea = new javax.swing.JTextArea();
        enviarMenssagemButton = new javax.swing.JButton();
        pausejButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        udpTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        numMessagesTCP = new javax.swing.JLabel();
        numMessagesUDP = new javax.swing.JLabel();
        numMessages = new javax.swing.JTextField();
        JLabelMessages = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        multicastTextArea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        numMessageMulticast = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        rmiTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("IP");

        ipJtf.setText("localhost");

        portaJTF.setText("1234");

        jLabel2.setText("Porta");

        conectarButton.setText("Conectar");
        conectarButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                conectarButtonMouseClicked(evt);
            }
        });

        tcpTextArea.setEditable(false);
        tcpTextArea.setColumns(20);
        tcpTextArea.setRows(5);
        jScrollPane1.setViewportView(tcpTextArea);

        enviarMenssagemButton.setText("Enviar");
        enviarMenssagemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enviarMenssagemButtonMouseClicked(evt);
            }
        });

        pausejButton.setText("Pause");
        pausejButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pausejButtonMouseClicked(evt);
            }
        });

        udpTextArea.setColumns(20);
        udpTextArea.setRows(5);
        jScrollPane2.setViewportView(udpTextArea);

        jLabel3.setText("TCP");

        jLabel4.setText("UDP");

        numMessagesTCP.setText("NumMessagesTCP");

        numMessagesUDP.setText("NumMessagesUDP");

        JLabelMessages.setText("Number of Messages");

        multicastTextArea.setColumns(20);
        multicastTextArea.setRows(5);
        jScrollPane3.setViewportView(multicastTextArea);

        jLabel6.setText("Multicast");

        numMessageMulticast.setText("NumMessageMulticast");

        rmiTextArea.setColumns(20);
        rmiTextArea.setRows(5);
        jScrollPane4.setViewportView(rmiTextArea);

        jLabel5.setText("RMI");

        jLabel7.setText("NumMessageRMI");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pausejButton)
                        .addGap(213, 213, 213)
                        .addComponent(enviarMenssagemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numMessagesTCP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numMessagesUDP))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(numMessageMulticast)))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(202, 202, 202)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ipJtf, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portaJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(JLabelMessages)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addComponent(conectarButton)))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipJtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portaJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(numMessages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLabelMessages)
                    .addComponent(conectarButton))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(jScrollPane2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numMessagesTCP)
                    .addComponent(numMessagesUDP)
                    .addComponent(numMessageMulticast)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enviarMenssagemButton)
                    .addComponent(pausejButton))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void conectarButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_conectarButtonMouseClicked
    keepsending = true;
        try {
            numberMessages = Integer.parseInt(numMessages.getText());
        } catch (Exception e) {
            
        }
        if(numMessages.getText().equals("")){
            numberMessages = 100;
        }
    
        
        //TCP
        //TCPsender();
        
        
        //UDP - confirmation receiver
        //
        //UDPsender();
        
        //Multicast
//        MulticastServer();
//        
//        MulticastSender();
        
        RmiClient();
        
        RMISender();                
    }//GEN-LAST:event_conectarButtonMouseClicked
          
    private void RmiClient(){
        
         try {
            //buscamos uma referência do chat no servidor
            this.chat = (IChat) Naming.lookup("rmi://localhost/Chat");
            
            
            this.callback = new Callback(); 
             //o cliente precisa "se colocar" na lista do servidor
            this.chat.registraCliente(this.callback);
            
            rmiTextArea.append("New connection established!\n");            
            
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            rmiTextArea.append("Erro na conexão\n");
        }             
    }
    
    
    private void RMISender(){
        new Thread(){
            @Override
            public void run() {       
                    for (int i = 0; i < numberMessages; i++) {
                        try {
                    String mensagem = messageRMI.toString();
                    chat.enviaMensagem(mensagem);                
                    messageRMI++;
                    } catch (RemoteException ex) {
                        
                    }                    
                }                                
            }
            
        }.start();         
    }
    
    private void MulticastSender(){
        
        new Thread(){
            @Override
            public void run() {                
                while(keepsending){                    
                    for (int i = 0; i < numberMessages; i++) {
                           messageMulticast++;
                        String message = messageMulticast.toString();
                        try {
                            DatagramPacket pacote = new DatagramPacket(message.getBytes(),message.length(), group, 3456);
                            multicastServer.send(pacote);        
                            multicastTextArea.append("Message sent: " + message + "\n");
                        } catch (Exception e) {
                        }                                                                                     
                    }                     
                }                
            }
            
        }.start();    
    }
    
    private void MulticastServer(){
         try {
            //Configuração padrão
            group = InetAddress.getByName("239.1.2.3"); 
            multicastServer = new MulticastSocket(3456);
            multicastServer.joinGroup(group);         
            
            
            //Creating thread to receive messages
            new Thread(){
                @Override
                public void run(){
                    while(true){
                        try{
                            byte[] buffer = new byte[1000];
                            DatagramPacket packetReceived = new DatagramPacket(buffer, buffer.length);
                            multicastServer.receive(packetReceived);
                            
                            String messageReceived = new String(packetReceived.getData(), 0, packetReceived.getLength());                            
                            multicastTextArea.append("Message received: "+messageReceived  + "\n"); 
                            multicastTextArea.setCaretPosition(multicastTextArea.getDocument().getLength());
                            numMessageMulticast.setText(messageReceived.toString());
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                    }
                }
            }.start();
            
                       
            //processo deixa o grupo
            //s.leaveGroup(grupo);            
            
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    private void TCPsender(){
                String ip = ipJtf.getText().toString();
        int porta  = Integer.parseInt(portaJTF.getText().toString());
        try {
            socketTCP = new Socket(ipJtf.getText().toString(), Integer.parseInt(portaJTF.getText().toString()));
            //
            enviarMenssagemButton.setEnabled(true);
            
            keepsending = true;
            // criar uma thread (inline) para receber mensagens do servidor
            new Thread(){
                public void run(){
                    while(true){                        
                        while(keepsending){                            
                            for (int i = 0; i < numberMessages; i++) {
                                sendMessageTCP();   
                                tcpTextArea.setCaretPosition(tcpTextArea.getDocument().getLength());
                                numMessagesTCP.setText(messageTCP.toString());                            
                            }                         
                        }                            
                    }                    
                }
            }.start();
                  
        } catch (Exception e) {
            tcpTextArea.append("Servidor " + ip + "na porta " + porta + "não encontrado");
        }
    }
    
    private void UDPsender(){
          messageUDP = 0;
           try {
            if (socketClientUDP == null) {
                socketClientUDP = new DatagramSocket();
            }

            //aguardar mensagens que podem chegar através do socket
            new Thread() {
                public void run() {
                    try {                        
                        while (keepsending) {
                            for (int i = 0; i < numberMessages; i++) {
                                sendMessageUDP();
                                //Start client serverReceiver
                                DatagramPacket packagereceived = new DatagramPacket(new byte[100], 100);
                                //wait client messages
                                socketClientUDP.receive(packagereceived);
                                //retiramos do pacote os bytes da mensagem
                                byte buffer[] = packagereceived.getData();
                                //convertemos os bytes em string
                                Integer messageReceived = Integer.parseInt(new String(buffer, 0, packagereceived.getLength()));
                                //adiciona no textArea a mensagemRecebida                            
                                if(messageReceived.equals(messageUDP)){
                                    udpTextArea.append("Message Received: " +messageReceived + "\n");                                   
                                    numMessagesUDP.setText(messageUDP.toString());
                                }else{
                                    udpTextArea.append("*********Message " + messageUDP + "lost" + "\n");       
                                    messageUDP--;
                                }
                                //autoscroll
                                udpTextArea.setCaretPosition(udpTextArea.getDocument().getLength());
                                }                            
                        }
                    } catch (IOException ex) {
                        System.out.println("ERRO-------*********" + ex.getMessage());
                    }
                }
            }.start();

        } catch (SocketException ex) {
            udpTextArea.append("Não foi possível criar o socket do cliente\n");
        }
    }
    
    private void sendMessageTCP(){
        messageTCP++;        
        try {
            for (int i = 0; i < numberMessages; i++) {
                //create chanal to send data
                tcpTextArea.append("Message Sent " + messageTCP.toString() + "\n");            
                DataOutputStream outStream = new DataOutputStream(socketTCP.getOutputStream());
                //send data to server
                outStream.writeInt(messageTCP);
            }            
            
        } catch (Exception e) {
            tcpTextArea.append("Servidor erro 500" + '\n');
        
            enviarMenssagemButton.setEnabled(false);
        }       
        
    }
    
    private void sendMessageUDP(){
        messageUDP++;
        String message = messageUDP.toString();        
        String ipEnviar = ipJtf.getText();
        int portaEnviar = Integer.parseInt(portaJTF.getText());
        try {
            //monto um pacote datagrama para enviar
            DatagramPacket pacoteEnviar = new DatagramPacket(
                    message.getBytes(),
                    message.getBytes().length,
                    InetAddress.getByName(ipEnviar),
                    portaEnviar);
            //envia para o servidor
            socketClientUDP.send(pacoteEnviar);
            udpTextArea.append("Message Sent: " + message + "\n");
        } catch (UnknownHostException ex) {
            tcpTextArea.append("Destinatário desconhecido\n");
        } catch (IOException ex) {
            tcpTextArea.append("Erro na hora de enviar o pacote\n");
        }
    }
    
    private void enviarMenssagemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enviarMenssagemButtonMouseClicked
        // TODO add your handling code here:
        //enviar mensagem
        
        sendMessageTCP();
    }//GEN-LAST:event_enviarMenssagemButtonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(socketTCP != null){
            try {
                socketTCP.close();
            } catch (Exception e) {
            }            
        }
    }//GEN-LAST:event_formWindowClosing

    private void pausejButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pausejButtonMouseClicked
        keepsending = !keepsending;
        
    }//GEN-LAST:event_pausejButtonMouseClicked

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelMessages;
    private javax.swing.JButton conectarButton;
    private javax.swing.JButton enviarMenssagemButton;
    private javax.swing.JTextField ipJtf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea multicastTextArea;
    private javax.swing.JLabel numMessageMulticast;
    private javax.swing.JTextField numMessages;
    private javax.swing.JLabel numMessagesTCP;
    private javax.swing.JLabel numMessagesUDP;
    private javax.swing.JButton pausejButton;
    private javax.swing.JTextField portaJTF;
    private javax.swing.JTextArea rmiTextArea;
    private javax.swing.JTextArea tcpTextArea;
    private javax.swing.JTextArea udpTextArea;
    // End of variables declaration//GEN-END:variables
}
