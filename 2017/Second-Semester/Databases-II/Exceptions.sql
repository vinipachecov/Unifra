-- Aula 10 Agosto Banco II

-- Exceptions

-- Fornecedor
CREATE EXCEPTION E_NULL 'Valor nulo. Insira um valor correspondente.';


CREATE TRIGGER T_VAL_NULOS_FOR FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
IF (NEW.cnpj IS NULL) THEN
EXCEPTION E_NULL;
END

-- Tentativa de inserir valor no Fornecedor
insert into FORNECEDOR(razaosocial,email)
values
('vender pao','vendepao@gmailcom');

CREATE TRIGGER T_VERIF_FORNECEDOR FOR FORNECEDOR
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN
	IF(EXISTS (SELECT COMPRA.CODIGOFORNECEDOR 
				FROM COMPRA
				WHERE COMPRA.CODIGOFORNECEDOR = OLD.CODIGO))THEN
				EXCEPTION E_IMPEDE;
END 

---------------------------------------------
-- Produto

set term^;

--Trigger para valores nulos

CREATE TRIGGER T_VAL_NULOS_PRODUTO for PRODUTO
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
if ((NEW.nome IS NULL) 
OR (new.quantidademinima is null) 
OR (new.quantidadeatual is null)
OR (new.valorunitario is null)
OR (NEW.codtipo IS null)
OR (NEW.codmarca IS null)) 
THEN
EXCEPTION E_NULL;
END

END^
set term;^



CREATE TRIGGER T_VERIF_FORNECEDOR FOR FORNECEDOR
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN
	IF(EXISTS (SELECT COMPRA.CODIGOFORNECEDOR 
				FROM COMPRA
				WHERE COMPRA.CODIGOFORNECEDOR = OLD.CODIGO))THEN
				EXCEPTION E_IMPEDE;
END 

-- CREATE EXCEPTION E_IMPEDE 'Registro com outras tabelas associadas' 
-- OU SEJA: tabela itemvenda, itemcompra, historicoEstoque;

CREATE TRIGGER T_VERIF_PRODUTO FOR PRODUTO
ACTIVE BEFORE	DELETE POSITION 0
AS
BEGIN
	if( (EXISTS(SELECT  V.CODPRODUTO
				FROM ITEMVENDA V
				WHERE V.CODPRODUTO = OLD.CODIGO))
				OR
				(EXISTS(SELECT C.CODPRODUTO 
				FROM ITEMCOMPRA C
				WHERE C.CODPRODUTO = OLD.CODIGO))
				OR
				(EXISTS(SELECT H.CODPRODUTO 
				FROM HISTORICOESTOQUE H
				WHERE H.CODPRODUTO = OLD.CODIGO)))			
				THEN
		EXCEPTION E_IMPEDE;
END 



--Populando
SELECT *  FROM PRODUTO; 

INSERT INTO PRODUTO(CODTIPO,CODMARCA,NOME,QUANTIDADEMINIMA,QUANTIDADEATUAL,VALORUNITARIO,UNIDADE)
VALUES
(1,1,'Whey 900g',1,100,150,'Pote 900g');

--testando exceção de registro associado
DELETE FROM PRODUTO
WHERE CODIGO = 5;

SELECT * FROM ITEMCOMPRA;

SELECT * FROM COMPRA;

SELECT * FROM ITEMVENDA;



---------------------------------------------
-- Cliente


CREATE TRIGGER T_VALORES_NULOS_CLI FOR CLIENTE
active BEFORE INSERT POSITION 1
AS 
BEGIN
	if((NEW.cpf IS NULL) OR (NEW.datanasc IS NULL )) THEN
	EXCEPTION E_NULL;
END 


--  trigger que impeça a exclusão de um cliente com vendas associadas.

CREATE EXCEPTION E_IMPEDE 'Registro com outras tabelas associadas';

CREATE TRIGGER T_VERIF_CLIENTE FOR CLIENTE
ACTIVE BEFORE	DELETE POSITION 0
AS
BEGIN
	if(EXISTS(SELECT V.CODCLIENTE 
				FROM VENDA V
				WHERE V.CODCLIENTE = OLD.CODIGO)) THEN
		EXCEPTION E_IMPEDE;
END 

---------------------------------------------
-- COMPRA

CREATE EXCEPTION E_JA_EXISTE 'Registro com valor já existente';
DELETE EXCEPTION JA_EXISTE;

-- valores duplicados

CREATE TRIGGER T_VALOR_EXISTENTE_COMPRA FOR COMPRA
ACTIVE BEFORE INSERT POSITION 1
AS 
BEGIN
	if((NEW.NUMEROINF IS NULL) OR (EXISTS(SELECT COMPRA.NUMEROINF
									FROM COMPRA
									WHERE COMPRA.NUMEROINF = NEW.NUMEROINF))) THEN
	EXCEPTION E_JA_EXISTE;
END 



-- 'Registro com outras tabelas associadas';

CREATE TRIGGER T_VERIF_FORNECEDOR FOR COMPRA
ACTIVE BEFORE	DELETE POSITION 0
AS
BEGIN
	if(EXISTS(SELECT  COMPRA.CODIGOFORNECEDOR
				FROM COMPRA
				WHERE CODIGOFORNECEDOR = OLD.CODIGO)) THEN
		EXCEPTION E_IMPEDE;
END 

--teste

DELETE FROM FORNECEDOR
WHERE CODIGO = 1; 
-- retorno com Erro pois registro possui referencias na tabela COMPRA

---------------------------------------------
-- Marca


--valores nulos
CREATE TRIGGER T_VALOR_NULO_MARCA FOR MARCA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF(NEW.nome IS NULL) THEN
	EXCEPTION E_NULL;
END

-- Valores duplicados

CREATE TRIGGER T_VALOR_IGUAL FOR MARCA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NEW.NOME IS NULL) OR (EXISTS(SELECT MARCA.NOME 
										FROM MARCA
										WHERE MARCA.NOME = NEW.NOME)))THEN
										EXCEPTION E_JA_EXISTE;										
END 

---------------------------------------------
-- Tipo

--Exceção para nome nulo
CREATE TRIGGER T_VALOR_NULO_TIPO FOR TIPO
active BEFORE INSERT POSITION 6
AS
BEGIN
	if(NEW.nome IS NULL) THEN
	EXCEPTION E_NULL;	
END

--Exceção para nome igual

CREATE TRIGGER T_NOME_IGUAL FOR TIPO
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NEW.nome IS NULL) OR (EXISTS(SELECT TIPO.NOME 
									   FROM TIPO
									   WHERE TIPO.NOME = NEW.NOME)))THEN
    EXCEPTION E_JA_EXISTE;
END 

 
---------------------------------------------
-- Item Venda



-- Trazer o valor unitario do produto para tupla novo do ItemVenda

CREATE OR ALTER TRIGGER T_ATIB_ULR_IV FOR ITEMVENDA
ACTIVE BEFORE INSERT OR UPDATE POSITION 6
AS
	DECLARE VARIABLE VLR D_DECIMAL;
	
BEGIN 
	SELECT FIRST 1 P.VALORUNITARIO
	FROM PRODUTO P
	WHERE P.CODIGO = NEW.codproduto
	INTO :VLR;
	
	NEW.VALORUNITARIO =:VLR;
END

-- populando
SELECT * FROM ITEMVENDA 

INSERT INTO ITEMVENDA(CODPRODUTO,CODVENDA,TOTAL,QUANTIDADE)
VALUES
(5,3,150000,1000);
---------------------------------------------
-- Venda

CREATE TRIGGER T_VALORES_NULOS_VENDA FOR VENDA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NUMEROINF IS NULL)
	OR (TOTAL IS NULL) 
	OR (CODCLIENTE IS NULL) 
	OR (DATAVENDA IS null))
	THEN
	EXCEPTION E_NULL;
END 


SELECT * FROM VENDA;
DELETE FROM VENDA
WHERE CODIGO = 2;

SELECT * FROM CLIENTE;


INSERT INTO VENDA(DATAVENDA, NUMERONF, SUBTOTAL, DESCONTO, TOTAL, CODCLIENTE)
VALUES
('5-20-2017','0123456789',150000,0,150000,3);


---------------------------------------------
-- ITEMCOMPRA


-- Trigger para pegar valor unitario da tabela produto
CREATE OR ALTER TRIGGER T_VALORUNITARIO_ITEMCOMPRA FOR ITEMCOMPRA
ACTIVE BEFORE INSERT OR UPDATE POSITION 6
AS

	DECLARE VARIABLE VALUNIT D_DECIMAL;		
BEGIN 
	SELECT FIRST 1 P.VALORUNITARIO
	FROM PRODUTO P
	WHERE P.CODIGO = NEW.codproduto
	INTO :VALUNIT;
	
	NEW.VALORUNITARIO =:VALUNIT;
END


INSERT INTO ITEMCOMPRA ( CODPRODUTO,CODCOMPRA,TOTAL,QUANTIDADE)
VALUES
(5,2,1500,10);

SELECT * FROM COMPRA;
INSERT INTO COMPRA()

SELECT * FROM ITEMCOMPRA;




