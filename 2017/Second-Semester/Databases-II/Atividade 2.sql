--Atividade 02
--Criar triggers:

--Para evitar que campos nulos (definidos por você) sejam inseridos.
--(2)Que atribua 0 (zero) à quantidade atual dos produtos cujo mesmo campo seja nulo.
--(3)Que evite a inserção de valores redundantes (campos significativos).
--(4)Que insira um registro na tabela histórico toda vez que um produto seja inserido ou alterado.


-- Aula 10 Agosto Banco II

--3
--Cliente
-- nome x cpf
-- nome x email

CREATE EXCEPTION E_CPF_JA_EXISTE 'CPF já existe registrado na base de dados.';

CREATE EXCEPTION E_NOME_JA_REGISTRADO 'Nome ja registrado';

CREATE TRIGGER T_VERIF_CLIENTE_CPF FOR CLIENTE
ACTIVE BEFORE INSERT POSITION 6
AS
BEGIN
	if(EXISTS(SELECT C.NOME 
				FROM CLIENTE C
				WHERE C.CPF <> NEW.CPF AND C.NOME = NEW.nome)) THEN
		EXCEPTION E_NOME_JA_REGISTRADO;
END 

SELECT  * FROM CLIENTE;

-- Teste com o CPF diferente e nome igual
INSERT	INTO CLIENTE(NOME,NUMEROVENDAS,TELEFONE,EMAIL,CPF,DATANASC)
VALUES
('Milton Friedman',5000,'5599201920','mfried@gmail.com','49203920391','07-10-1980');



CREATE TRIGGER T_VERIF_CLIENTE_NOME FOR CLIENTE
ACTIVE BEFORE INSERT POSITION 6
AS
BEGIN
	if(EXISTS(SELECT C.CPF 
				FROM CLIENTE C
				WHERE C.CPF = NEW.CPF AND C.NOME <> NEW.NOME)) THEN
		EXCEPTION E_CPF_JA_EXISTE;
END 

-- teste com CPF igual e nome diferente
INSERT	INTO CLIENTE(NOME,NUMEROVENDAS,TELEFONE,EMAIL,CPF,DATANASC)
VALUES
('Milton Driedman',5000,'5599201920','mfried@mail.com','49203920392','07-10-1980');

-- 

-- nome x email
CREATE EXCEPTION E_EMAIL_JA_EXISTE 'Nome com Email ja cadastrado';

CREATE TRIGGER T_VERIF_CLIENTE_EMAIL FOR CLIENTE
ACTIVE BEFORE INSERT POSITION 6
AS
BEGIN
	if(EXISTS(SELECT C.EMAIL 
				FROM CLIENTE C
				WHERE C.EMAIL = NEW.EMAIL)) THEN
		EXCEPTION E_EMAIL_JA_EXISTE;
END 

-- teste com nome diferente, cpf diferente e email igual
INSERT	INTO CLIENTE(NOME,NUMEROVENDAS,TELEFONE,EMAIL,CPF,DATANASC)
VALUES
('Milton Driedman',5000,'5599201920','mfried@gmail.com','49203920394','07-10-1980');

--(3) Fornecedor

CREATE EXCEPTION E_RAZAOSOCIAL_JA_EXISTE 'Razao social já registrada.';

--razao social não pode ser igual

CREATE TRIGGER T_RAZAOSOCIAL_FORNECEDOR FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 6
AS
BEGIN
	if(EXISTS(SELECT F.CODIGO 
				FROM FORNECEDOR F
				WHERE F.RAZAOSOCIAL = NEW.RAZAOSOCIAL)) THEN
		EXCEPTION E_RAZAOSOCIAL_JA_EXISTE;
END

-- TESTE COM RAZAO SOCIAL IGUAL
INSERT INTO FORNECEDOR (razaosocial, EMAIL, CNPJ, TELEFONE, NOMEFANTASIA,NUMEROCOMPRAS)
VALUES
('Fornecedor 1', 'forn1@gmail.com', '29102938102920', '5533201920','Nome fantasia 1', 100);

SELECT * FROM FORNECEDOR;

-- CNPJ DIFERENTE

CREATE EXCEPTION E_CNPJ_JA_EXISTE 'CNPJ já registrado.';

CREATE TRIGGER T_CNPJ_FORNECEDOR FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 6
AS
BEGIN
	if(EXISTS(SELECT F.CODIGO 
				FROM FORNECEDOR F
				WHERE F.CNPJ = NEW.CNPJ)) THEN
		EXCEPTION E_CNPJ_JA_EXISTE;
END

--testse com CNPJ igual mas outros valores diferentes
INSERT INTO FORNECEDOR (razaosocial, EMAIL, CNPJ, TELEFONE, NOMEFANTASIA,NUMEROCOMPRAS)
VALUES
('Fornecedor 10', 'forn1@gmail.com', '29102938102920', '5533201920','Nome fantasia 1', 100);

-- Email igual

CREATE EXCEPTION E_FORNECEDOR_EMAIL 'Email registro em outro fornecedor';

CREATE TRIGGER T_EMAIL_FORNECEDOR FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 6
AS
BEGIN
	if(EXISTS(SELECT F.CODIGO 
				FROM FORNECEDOR F
				WHERE F.EMAIL = NEW.EMAIL)) THEN
		EXCEPTION E_FORNECEDOR_EMAIL;
END

--testse com CNPJ igual mas outros valores diferentes
INSERT INTO FORNECEDOR (razaosocial, EMAIL, CNPJ, TELEFONE, NOMEFANTASIA,NUMEROCOMPRAS)
VALUES
('Fornecedor 10', 'forn1@gmail.com', '29102938102940', '5533201920','Nome fantasia 1', 100);

-- (3) Marca

--valores nulos
CREATE TRIGGER T_VALOR_NULO_MARCA FOR MARCA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF(NEW.nome IS NULL) THEN
	EXCEPTION E_NULL;
END

-- Valores duplicados de nomes

CREATE TRIGGER T_VALOR_IGUAL FOR MARCA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NEW.NOME IS NULL) OR (EXISTS(SELECT MARCA.NOME 
										FROM MARCA
										WHERE MARCA.NOME = NEW.NOME)))THEN
										EXCEPTION E_JA_EXISTE;										
END 

-- (3) Tipo


--Exceção para nome nulo
CREATE TRIGGER T_VALOR_NULO_TIPO FOR TIPO
active BEFORE INSERT POSITION 6
AS
BEGIN
	if(NEW.nome IS NULL) THEN
	EXCEPTION E_NULL;	
END

--Exceção para nome igual

CREATE TRIGGER T_NOME_IGUAL FOR TIPO
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NEW.nome IS NULL) OR (EXISTS(SELECT TIPO.NOME 
									   FROM TIPO
									   WHERE TIPO.NOME = NEW.NOME)))THEN
    EXCEPTION E_JA_EXISTE;
END 

-- (3) Produto

-- nome igual

CREATE EXCEPTION E_NOME_JA_EXISTE 'Nome já existente em outro registro.';

CREATE TRIGGER T_NOME_IGUAL_PRODUTO FOR PRODUTO
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NEW.NOME IS NULL) OR (EXISTS(SELECT PRODUTO.NOME 
									   FROM PRODUTO
									   WHERE PRODUTO.NOME = NEW.NOME)))THEN
    EXCEPTION E_NOME_JA_EXISTE;
END

--TESTE NOME IGUAL
SELECT * FROM PRODUTO;

INSERT INTO PRODUTO(CODTIPO,CODMARCA,NOME,QUANTIDADEMINIMA,QUANTIDADEATUAL,VALORUNITARIO,UNIDADE)
VALUES
(1,1,'Whey 900g',1,100,150,'Pote 900g');



-- (3) Compra

-- Nota fiscal duplicada


CREATE TRIGGER T_NOTAFISCAL_EXISTENTE_COMPRA FOR COMPRA
ACTIVE BEFORE INSERT POSITION 1
AS 
BEGIN
	if((NEW.NUMERONF IS NULL) OR (EXISTS(SELECT COMPRA.NUMERONF
									FROM COMPRA
									WHERE COMPRA.NUMERONF = NEW.NUMERONF))) THEN
	EXCEPTION E_NF_JA_EXISTE;
END 

-- (3) Venda

-- Nota fiscal duplicada


CREATE TRIGGER T_NOTAFISCAL_EXISTENTE_VENDA FOR VENDA
ACTIVE BEFORE INSERT POSITION 1
AS 
BEGIN
	if((NEW.NUMERONF IS NULL) OR (EXISTS(SELECT VENDA.NUMERONF
									FROM VENDA
									WHERE VENDA.NUMERONF = NEW.NUMERONF))) THEN
	EXCEPTION E_NF_JA_EXISTE;
END 

CREATE TRIGGER T_VALORES_NULOS_VENDA FOR VENDA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NUMEROINF IS NULL)
	OR (TOTAL IS NULL) 
	OR (CODCLIENTE IS NULL) 
	OR (DATAVENDA IS null))
	THEN
	EXCEPTION E_NULL;
END 

-- TESTE NOTA FISCAL JÁ EXISTENTE
SELECT * FROM VENDA;

INSERT INTO VENDA(DATAVENDA, NUMERONF, SUBTOTAL, DESCONTO, TOTAL, CODCLIENTE)
VALUES
('5-20-2017','0123456789',150000,0,150000,3);


-- (3) Item venda

-- Mesmo código de venda e mesmo codigo de produto com total diferente

DROP  EXCEPTION E_ITEMVENDA_JA_EXISTE;

DROP TRIGGER T_CODVENDA_CODPROD_IGUAL;

CREATE EXCEPTION E_ITEMVENDA_JA_EXISTE 'Já existe registro com mesmo código de produto e código de venda. Duplicação forçada.';

CREATE TRIGGER T_CODVENDA_CODPROD_IGUAL FOR ITEMVENDA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF(EXISTS(SELECT IT.CODPRODUTO, IT.CODVENDA
			  FROM ITEMVENDA IT
			  WHERE IT.CODPRODUTO = NEW.CODPRODUTO AND IT.CODVENDA = NEW.CODVENDA))THEN
			  EXCEPTION E_ITEMVENDA_JA_EXISTE;						  
END 


--(3) item compra

-- Mesmo código de venda e mesmo codigo de produto com total diferente

CREATE EXCEPTION E_ITEMCOMPRA_JA_EXISTE 'Já existe registro com mesmo código de produto e código de compra. Duplicação forçada.';

CREATE TRIGGER T_CODCOMPRA_CODPROD_IGUAL FOR ITEMCOMPRA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF(EXISTS(SELECT IT.CODPRODUTO, IT.CODCOMPRA
			  FROM ITEMCOMPRA IT
			  WHERE IT.CODPRODUTO = NEW.CODPRODUTO AND IT.CODVENDA = NEW.CODVENDA))THEN
			  EXCEPTION E_ITEMVENDA_JA_EXISTE;						  
END 




-----------------------------------------------------------------------------------
INSERT INTO PRODUTO(CODTIPO,CODMARCA,NOME,QUANTIDADEMINIMA,VALORUNITARIO,UNIDADE)
VALUES
(1,1,'Whey 1800g',1,150,'Refill 1800g');

SELECT * FROM 
PRODUTO;

-- (2)
CREATE OR ALTER TRIGGER T_QUANTATUAL_NULL_SET_0 FOR PRODUTO
ACTIVE BEFORE INSERT OR UPDATE POSITION 6
AS	
BEGIN 
	IF(NEW.QUANTIDADEATUAL IS NULL )THEN
	NEW.QUANTIDADEATUAL = 0;
END


-- Exceptions

-- Fornecedor
CREATE EXCEPTION E_NULL 'Valor nulo. Insira um valor correspondente.';


CREATE TRIGGER T_VAL_NULOS_FOR FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
IF (NEW.cnpj IS NULL) THEN
EXCEPTION E_NULL;
END

-- Tentativa de inserir valor no Fornecedor
insert into FORNECEDOR(razaosocial,email)
values
('vender pao','vendepao@gmailcom');

CREATE TRIGGER T_VERIF_FORNECEDOR FOR FORNECEDOR
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN
	IF(EXISTS (SELECT COMPRA.CODIGOFORNECEDOR 
				FROM COMPRA
				WHERE COMPRA.CODIGOFORNECEDOR = OLD.CODIGO))THEN
				EXCEPTION E_IMPEDE;
END 

---------------------------------------------
-- Produto

set term^;

--Trigger para valores nulos

CREATE TRIGGER T_VAL_NULOS_PRODUTO for PRODUTO
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
if ((NEW.nome IS NULL) 
OR (new.quantidademinima is null) 
OR (new.quantidadeatual is null)
OR (new.valorunitario is null)
OR (NEW.codtipo IS null)
OR (NEW.codmarca IS null)) 
THEN
EXCEPTION E_NULL;
END

END^
set term;^



CREATE TRIGGER T_VERIF_FORNECEDOR FOR FORNECEDOR
ACTIVE BEFORE DELETE POSITION 0
AS 
BEGIN
	IF(EXISTS (SELECT COMPRA.CODIGOFORNECEDOR 
				FROM COMPRA
				WHERE COMPRA.CODIGOFORNECEDOR = OLD.CODIGO))THEN
				EXCEPTION E_IMPEDE;
END 

-- CREATE EXCEPTION E_IMPEDE 'Registro com outras tabelas associadas' 
-- OU SEJA: tabela itemvenda, itemcompra, historicoEstoque;

CREATE TRIGGER T_VERIF_PRODUTO FOR PRODUTO
ACTIVE BEFORE	DELETE POSITION 0
AS
BEGIN
	if( (EXISTS(SELECT  V.CODPRODUTO
				FROM ITEMVENDA V
				WHERE V.CODPRODUTO = OLD.CODIGO))
				OR
				(EXISTS(SELECT C.CODPRODUTO 
				FROM ITEMCOMPRA C
				WHERE C.CODPRODUTO = OLD.CODIGO))
				OR
				(EXISTS(SELECT H.CODPRODUTO 
				FROM HISTORICOESTOQUE H
				WHERE H.CODPRODUTO = OLD.CODIGO)))			
				THEN
		EXCEPTION E_IMPEDE;
END 



--Populando
SELECT *  FROM PRODUTO; 

INSERT INTO PRODUTO(CODTIPO,CODMARCA,NOME,QUANTIDADEMINIMA,QUANTIDADEATUAL,VALORUNITARIO,UNIDADE)
VALUES
(1,1,'Whey 900g',1,100,150,'Pote 900g');

--testando exceção de registro associado
DELETE FROM PRODUTO
WHERE CODIGO = 5;

SELECT * FROM ITEMCOMPRA;

SELECT * FROM COMPRA;

SELECT * FROM ITEMVENDA;



---------------------------------------------
-- Cliente


CREATE TRIGGER T_VALORES_NULOS_CLI FOR CLIENTE
active BEFORE INSERT POSITION 1
AS 
BEGIN
	if((NEW.cpf IS NULL) OR (NEW.datanasc IS NULL )) THEN
	EXCEPTION E_NULL;
END 


--  trigger que impeça a exclusão de um cliente com vendas associadas.

CREATE EXCEPTION E_IMPEDE 'Registro com outras tabelas associadas';

CREATE TRIGGER T_VERIF_CLIENTE FOR CLIENTE
ACTIVE BEFORE	DELETE POSITION 0
AS
BEGIN
	if(EXISTS(SELECT V.CODCLIENTE 
				FROM VENDA V
				WHERE V.CODCLIENTE = OLD.CODIGO)) THEN
		EXCEPTION E_IMPEDE;
END 

---------------------------------------------
-- COMPRA

CREATE EXCEPTION E_JA_EXISTE 'Registro com valor já existente';
DELETE EXCEPTION JA_EXISTE;

-- valores duplicados

DROP TRIGGER T_NOTAFISCAL_EXISTENTE_COMPRA;

CREATE EXCEPTION E_NF_JA_EXISTE 'Numero de nota fiscal já está em outro registro.';

CREATE TRIGGER T_NOTAFISCAL_EXISTENTE_COMPRA FOR COMPRA
ACTIVE BEFORE INSERT POSITION 1
AS 
BEGIN
	if((NEW.NUMERONF IS NULL) OR (EXISTS(SELECT COMPRA.NUMERONF
									FROM COMPRA
									WHERE COMPRA.NUMERONF = NEW.NUMERONF))) THEN
	EXCEPTION E_NF_JA_EXISTE;
END 

SELECT * FROM COMPRA;

INSERT INTO COMPRA (DATACOMPRA, NUMERONF,SUBTOTAL,DESCONTO,TOTAL,CODIGOFORNECEDOR)
VALUES
('10-22-2005',2019201921, 8000, 0, 8000,1);



-- 'Registro com outras tabelas associadas';

CREATE TRIGGER T_VERIF_FORNECEDOR FOR COMPRA
ACTIVE BEFORE	DELETE POSITION 0
AS
BEGIN
	if(EXISTS(SELECT  COMPRA.CODIGOFORNECEDOR
				FROM COMPRA
				WHERE CODIGOFORNECEDOR = OLD.CODIGO)) THEN
		EXCEPTION E_IMPEDE;
END 

--teste

DELETE FROM FORNECEDOR
WHERE CODIGO = 1; 
-- retorno com Erro pois registro possui referencias na tabela COMPRA

---------------------------------------------
-- Marca


--valores nulos
CREATE TRIGGER T_VALOR_NULO_MARCA FOR MARCA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF(NEW.nome IS NULL) THEN
	EXCEPTION E_NULL;
END

-- Valores duplicados

CREATE TRIGGER T_VALOR_IGUAL FOR MARCA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NEW.NOME IS NULL) OR (EXISTS(SELECT MARCA.NOME 
										FROM MARCA
										WHERE MARCA.NOME = NEW.NOME)))THEN
										EXCEPTION E_JA_EXISTE;										
END 

---------------------------------------------
-- Tipo

--Exceção para nome nulo
CREATE TRIGGER T_VALOR_NULO_TIPO FOR TIPO
active BEFORE INSERT POSITION 6
AS
BEGIN
	if(NEW.nome IS NULL) THEN
	EXCEPTION E_NULL;	
END

--Exceção para nome igual

CREATE TRIGGER T_NOME_IGUAL FOR TIPO
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NEW.nome IS NULL) OR (EXISTS(SELECT TIPO.NOME 
									   FROM TIPO
									   WHERE TIPO.NOME = NEW.NOME)))TH
    EXCEPTION E_JA_EXISTE;
END 

 
---------------------------------------------
-- Item Venda

--(5) Que ao inserir um ITENsVENDA, busque o valor do produto (tabela PRODUTOS) e atribua ao valor unitário de ITENSVENDA.

CREATE OR ALTER TRIGGER T_ATIB_ULR_IV FOR ITEMVENDA
ACTIVE AFTER INSERT OR UPDATE POSITION 6
AS
	DECLARE VARIABLE VLR D_DECIMAL;	
BEGIN 
	SELECT FIRST 1 P.VALORUNITARIO
	FROM PRODUTO P
	WHERE P.CODIGO = NEW.codproduto
	INTO :VLR;
	
	NEW.VALORUNITARIO =:VLR;
END



-- Trazer o valor unitario do produto para tupla novo do ItemVenda

CREATE OR ALTER TRIGGER T_ATIB_ULR_IV FOR ITEMVENDA
ACTIVE BEFORE INSERT OR UPDATE POSITION 6
AS
	DECLARE VARIABLE VLR D_DECIMAL;
	
BEGIN 
	SELECT FIRST 1 P.VALORUNITARIO
	FROM PRODUTO P
	WHERE P.CODIGO = NEW.codproduto
	INTO :VLR;
	
	NEW.VALORUNITARIO =:VLR;
END

--calcular subtotal de uma venda:

CREATE OR ALTER TRIGGER T_CALC_SUB_VENDA_AIV FOR ITEMVENDA
active AFTER INSERT OR UPDATE POSITION 5
AS
	DECLARE VARIABLE subt numeric(15,2);
BEGIN 
	SELECT sum(IV.QUANTIDADE * IV.VALORUNITARIO)
	FROM ITEMVENDA IV
	WHERE IV.CODVENDA =NEW.CODVENDA
	INTO :SUBT;
	IF(:SUBT IS NULL)THEN
	SUBT = 0;
	UPDATE VENDA V
	SET V.SUBTOTAL=:SUBT,
		V.TOTAL = :SUBT - V.DESCONTO
	WHERE V.CODIGO = NEW.CODVENDA;
END 


-- populando
SELECT * FROM ITEMVENDA 

INSERT INTO ITEMVENDA(CODPRODUTO,CODVENDA,TOTAL,QUANTIDADE)
VALUES
(5,3,150000,1000);
---------------------------------------------
-- Venda

CREATE TRIGGER T_VALORES_NULOS_VENDA FOR VENDA
ACTIVE BEFORE INSERT POSITION 1
AS
BEGIN
	IF((NUMEROINF IS NULL)
	OR (TOTAL IS NULL) 
	OR (CODCLIENTE IS NULL) 
	OR (DATAVENDA IS null))
	THEN
	EXCEPTION E_NULL;
END 


SELECT * FROM VENDA;
DELETE FROM VENDA
WHERE CODIGO = 2;

SELECT * FROM CLIENTE;


INSERT INTO VENDA(DATAVENDA, NUMERONF, SUBTOTAL, DESCONTO, TOTAL, CODCLIENTE)
VALUES
('5-20-2017','0123456789',150000,0,150000,3);

-- CALCULANDO O NUMERO DE VENDAS DE UM CLIENTE;

CREATE OR ALTER TRIGGER T_CALC_NUMVENDAS FOR VENDA
ACTIVE AFTER INSERT OR UPDATE POSITION 5
AS
	DECLARE VARIABLE NV INT;
BEGIN 
	SELECT COUNT(V.ID)
	FROM VENDA V
	WHERE V.CODCLIENTE = NEW.CODCLIENTE
	INTO :NV;
	IF(:NV IS NULL) THEN
		NV = 0;
	UPDATE CLIENTE C
	SET C.NUMEROVENDAS = :NV
	WHERE C.CODIGO = NEW.CODCLIENTE;
 END 


---------------------------------------------
-- ITEMCOMPRA


-- Trigger para pegar valor unitario da tabela produto
CREATE OR ALTER TRIGGER T_VALORUNITARIO_ITEMCOMPRA FOR ITEMCOMPRA
ACTIVE BEFORE INSERT OR UPDATE POSITION 6
AS

	DECLARE VARIABLE VALUNIT D_DECIMAL;		
BEGIN 
	SELECT FIRST 1 P.VALORUNITARIO
	FROM PRODUTO P
	WHERE P.CODIGO = NEW.codproduto
	INTO :VALUNIT;
	
	NEW.VALORUNITARIO =:VALUNIT;
END


INSERT INTO ITEMCOMPRA ( CODPRODUTO,CODCOMPRA,TOTAL,QUANTIDADE)
VALUES
(5,2,1500,10);

SELECT * FROM COMPRA;
INSERT INTO COMPRA()

SELECT * FROM ITEMCOMPRA;



--(4)Que insira um registro na tabela histórico toda vez que um produto seja inserido ou alterado.

DROP TRIGGER T_MUDAINSERE_PRODUTO;

CREATE TRIGGER T_MUDAINSERE_PRODUTO FOR PRODUTO
ACTIVE AFTER INSERT OR UPDATE POSITION 6
AS
BEGIN
	INSERT INTO HISTORICOESTOQUE(CODPRODUTO,VALORUNITARIO,QUANTIDADE)
	VALUES(NEW.CODIGO,NEW.VALORUNITARIO,NEW.QUANTIDADEATUAL);
END 
	

--TESTE

SELECT * FROM HISTORICOESTOQUE;

SELECT * FROM PRODUTO;

DELETE FROM PRODUTO WHERE CODIGO = 12;

INSERT INTO PRODUTO(CODTIPO,CODMARCA,NOME,QUANTIDADEMINIMA,QUANTIDADEATUAL,VALORUNITARIO,UNIDADE)
VALUES
(1,1,'Whey 1800g',1,200,300,'1800g');
